[
  {
    "id": "table::cohort_diseases",
    "text": "Table: cohort_diseases\n    Description: Contains records of patient disease cohorts, linking individuals with disease groups and diagnosis metadata.\n    Columns:\n     - personal_id (string); Role: foreign_key; References: cohort_demographics.personal_id; Unique identifier for the patient.\n - major_group_id (integer); Role: foreign_key; References: lookup_segmentation_icd10.major_group_id; Identifier for the major disease group the pathology belongs to.\n - pathology_id (integer); Role: foreign_key; References: lookup_segmentation_icd10.pathology_id; Identifier of the specific pathology assigned to the patient.\n - diagnosis_code (string); Role: foreign_key; References: lookup_segmentation_icd10.icd10_specific_codes; Identifier of the specific icd10 code assigned to the patient. (e.g., I10, M47)\n - admission_date (timestamp); Exact date of patient admission or diagnosis registration. (e.g., 2023-03-21 10:02:00, 2021-10-31 00:00:00)\n - admission_week (integer); Week number of the admission date. (e.g., 3, 5)\n - admission_month (integer); Month number of the admission date. (e.g., 3, 10)\n - admission_year (integer); Year of the admission date. (e.g., 2023, 2021)\n - row_created_at (timestamp); Timestamp when the row was first created. (e.g., 2025-08-02 15:36:07.131694000, 2025-08-02 15:36:07.131694000)\n - row_updated_at (timestamp); Timestamp of the most recent update to the row. (e.g., 2025-08-02 15:36:07.131694000, 2025-08-02 15:36:07.131694000)"
  },
  {
    "id": "table::cohort_visits",
    "text": "Table: cohort_visits\n    Description: Contains aggregated patient visit information, linking individuals with visit types and temporal metadata.\n    Columns:\n     - personal_id (string); Role: foreign_key; References: cohort_demographics.personal_id; Unique identifier for the patient.\n - visit_type_id (integer); Role: foreign_key; References: patient_profile_encounter_type.id; Identifier for the type of visit. (e.g., inpatient, outpatient, emergency).\n - visit_week (integer); Week number in which the visit occurred. (e.g., 3, 2)\n - visit_month (integer); Month number in which the visit occurred. (e.g., 11, 4)\n - visit_year (integer); Year in which the visit occurred. (e.g., 2021, 2025)\n - total_visits (integer); Total number of visits for the patient in the given period. (e.g., 1, 1)\n - row_created_at (timestamp); Timestamp when the row was first created. (e.g., 2025-08-02 19:34:54.609091000, 2025-08-02 19:34:54.609091000)\n - row_updated_at (timestamp); Timestamp of the most recent update to the row. (e.g., 2025-08-02 19:34:54.609091000, 2025-08-02 19:34:54.609091000)"
  },
  {
    "id": "table::cohort_procedures",
    "text": "Table: cohort_procedures\n    Description: Contains records of medical procedures for patients, with limited major group identifiers and linked with admission date metadata.\n    Columns:\n     - personal_id (string); Role: foreign_key; References: cohort_demographics.personal_id; Unique identifier for the patient.\n - major_group_id (integer); Values: 23: Transplanted, 3: Chronic kidney failure; Identifier for the major procedure group assigned to the patient.\n - admission_date (timestamp); Exact date of procedure admission or registration. (e.g., 2021-12-26 00:00:00, 2025-08-02 19:34:54.609091000)\n - admission_week (integer); Week number of the admission date. (e.g., 4, 1)\n - admission_month (integer); Month number of the admission date. (e.g., 12, 11)\n - admission_year (integer); Year of the admission date. (e.g., 2021, 2017)\n - row_created_at (timestamp); Timestamp when the row was first created. (e.g., 2025-08-02 15:36:59.571728000, 2025-08-02 15:36:59.571728000)\n - row_updated_at (timestamp); Timestamp of the most recent update to the row. (e.g., 2025-08-02 15:36:59.571728000, 2025-08-02 15:36:59.571728000)"
  },
  {
    "id": "table::cohort_obesity",
    "text": "Table: cohort_obesity\n    Description: Contains patient obesity-related data, including BMI measurements, weight status categories, and time intervals of recorded scans.\n    Columns:\n     - personal_id (string); Role: foreign_key; References: cohort_demographics.personal_id; Unique identifier for the patient.\n - BMI (decimal); Body Mass Index value calculated for the patient. (e.g., 27.0842 , 27.3438)\n - weight_status_category_id (integer); Role: foreign_key; References: seed_obesity_weight_status_category.id; Identifier for the weight status category (e.g., underweight, normal, overweight, obese).\n - scan_start_date (timestamp); Date when the BMI scan or measurement started. (e.g., 2022-05-24 17:36:02, 2022-11-09 08:22:39)\n - scan_start_week (integer); Week number of the scan start date. (e.g., 2, 4)\n - scan_start_month (integer); Month number of the scan start date. (e.g., 5, 11)\n - scan_start_year (integer); Year of the scan start date. (e.g., 2022, 2024)\n - scan_end_date (timestamp); Date when the BMI scan or measurement ended. (e.g., 2022-11-08 08:22:39, 2024-05-02 16:10:00)\n - scan_end_week (integer); Week number of the scan end date. (e.g., 2, 1)\n - scan_end_month (integer); Month number of the scan end date. (e.g., 11, 5)\n - scan_end_year (integer); Year of the scan end date. (e.g., 2022, 2024)\n - row_created_at (timestamp); Timestamp when the row was first created. (e.g., 2025-08-02 15:43:45.756553000, 2025-08-02 15:43:45.756553000)\n - row_updated_at (timestamp); Timestamp of the most recent update to the row. (e.g., 2025-08-02 15:43:45.756553000, 2025-08-02 15:43:45.756553000)"
  },
  {
    "id": "table::cohort_high_risk",
    "text": "Table: cohort_high_risk\n    Description: Contains patient-level information related to high-risk conditions, including disease type, risk score, and timestamps.\n    Columns:\n     - personal_id (string); Role: foreign_key; References: cohort_demographics.personal_id; Unique identifier for the patient.\n - disease (string); Name of the disease or condition related to the high-risk category. (e.g., Diabetes, Stroke)\n - high_risk_id (integer); Values: 1: Diabetes, 2: Hypertension, 3: Stroke; Identifier for the high-risk condition category.\n - high_risk_Timestamp_date (timestamp); Original timestamp when the high-risk condition was detected or flagged. (e.g., 2024-03-28 13:39:00, 2024-03-05 10:23:00)\n - high_risk_Timestamp_week (integer); Week number derived from the high-risk timestamp. (e.g., 4, 1)\n - high_risk_Timestamp_month (integer); Month number derived from the high-risk timestamp. (e.g., 3, 7)\n - high_risk_Timestamp_year (integer); Year derived from the high-risk timestamp. (e.g., 2024, 2025)\n - score (double); Numerical score indicating the severity or probability of the high-risk condition. (e.g., 0.0677033658213765, 0.057633035728280865)\n - row_created_at (timestamp); Timestamp when the row was first created. (e.g., 2025-08-02 15:49:37.571138000, 2025-08-02 15:49:37.571138000)"
  },
  {
    "id": "table::cohort_demographics",
    "text": "Table: cohort_demographics\n    Description: Stores core demographic attributes for each patient and links to geographic, and age group lookup tables.\n    Columns:\n     - personal_id (string); Role: primary_key; Unique identifier for the patient.\n - cluster_id (integer); Role: foreign_key; References: mdm_clusters.cluster_id; Identifier for the healthcare cluster/service catchment to which the patient is assigned.\n - region_id (integer); Role: foreign_key; References: catchment_assignment_lookup_region.region_id; Identifier for the region catchment to where the patient live.\n - governorate_id (integer); Role: foreign_key; References: seed_moh_branch_governorate.governorate_id; Governorate identifier.\n - moh_branch_id (integer); Role: foreign_key; References: seed_moh_branch_governorate.moh_branch_id; MOH branch identifier.\n - city_id (string); Role: foreign_key; References: catchment_assignment_lookup_cities.city_id; Identifier for the city catchment to where the patient live.\n - district_id (string); Role: foreign_key; References: catchment_assignment_lookup_districts.district_id; District identifier within the city where the patient live.\n - gender_id (integer); Role: foreign_key; References: mdm_gender.gender_id; Gender identifier.\n - age (integer); Patient age (in years) at the reference time for the cohort snapshot. (e.g., 34, 42)\n - age_range (string); Patient's age group (e.g., '0-4', '5-9', '65+').\n - min_age (integer); Lower bound of the age group.\n - max_age (integer); Upper bound of the age group.\n - is_saudi (integer); Nationality flag; 1 if Saudi national, 0 otherwise.\n - is_assigned (integer); Flag indicating whether the patient is assigned to a facility/PHC within the cluster. 1 means assigned, 0 otherwise.\n - has_insurance (integer); Insurance coverage flag. 1 if has insurance, 0 otherwise.\n - is_active (integer); Active status flag for the cohort period. 1 means active, 0 otherwise.\n - is_dead (integer); Mortality flag; 1 if the patient is deceased, 0 otherwise.\n - birth_date (date); Date of birth. (e.g., 1991-07-03, 1983-06-01).\n - death_date (timestamp); Date of death (if applicable). (e.g., 2024-10-17 10:00:00, 2014-01-14 00:00:00). NULL if not dead.\n - segment_id (integer); Role: foreign_key; References: lookup_segmentation_icd10.segment_id; Identifier for the segment for the patient.\n - comorbidity_index (string); Represents the classification of the number of comorbid conditions associated with a patient. Values might be: 0 means no comorbidities, >=5 means five or more comorbidities, or the value might be a range which indicate set of comorbidities.\n - row_created_at (timestamp); Timestamp when the row was first created.\n - row_updated_at (timestamp); Timestamp of the most recent update to the row."
  },
  {
    "id": "table::lookup_segmentation_icd10",
    "text": "Table: lookup_segmentation_icd10\n    Description: Reference table for ICD-10 segmentation, providing hierarchical grouping of diseases and pathologies along with coding details and metadata.\n    Columns:\n     - segment_id (integer); Unique identifier for the top-level ICD-10 segment.\n - segment (string); Name of the ICD-10 segment. (e.g., Chronic Conditions, Healthy)\n - sub_segment_id (integer); Identifier for the ICD-10 sub-segment under the segment.\n - sub_segment (string); Name of the ICD-10 sub-segment. (e.g., Neurologic Conditions, Maternity and Infant)\n - major_group_id (integer); Identifier for the major disease group within the ICD-10 hierarchy.\n - major_group (string); Name of the major disease group. (e.g., Neuropathies, Acutely Ill)\n - pathology_id (integer); Identifier for the specific pathology in the ICD-10 structure.\n - pathology (string); Name of the pathology linked to the ICD-10 code. (e.g., ARTERIAL and VENOUS VASCULOPATHY, CELIAC DISEASE)\n - rank (integer); Rank or ordering of the pathology within the group.\n - saudi_segment (string); Saudi-specific mapping or segment classification if applicable. (e.g., 1.a, 3.f)\n - icd10_general_codes (string); General ICD-10 code(s) representing the disease group. (e.g., G11, A09)\n - icd10_specific_codes (string); Specific ICD-10 codes for detailed diagnosis. (e.g., G11.2, O99.5)\n - is_chronic_disease (integer); Flag indicating whether the condition is chronic (1 = Yes, 0 = No).\n - cost (double); Average or reference cost associated with the pathology. (e.g., 2886, 35438)\n - created_at (timestamp); Timestamp when the row was first created. (e.g., 2024-10-17 10:00:00, 2014-01-14 00:00:00)\n - updated_at (timestamp); Timestamp of the most recent update to the row. (e.g., 2024-10-17 10:00:00, 2014-01-14 00:00:00)"
  },
  {
    "id": "table::patient_profile_encounter_type",
    "text": "Table: patient_profile_encounter_type\n    Description: Lookup table that defines the different types of patient encounters (e.g., inpatient, outpatient, emergency), with multilingual labels.\n    Columns:\n     - id (integer); Role: primary_key; Unique identifier for the encounter type.\n - code (string); System code representing the encounter type. (e.g., O, ER, Short-Stay)\n - label_en (string); Encounter type label in English. (e.g., outpatient, Inpatient, Emergency)\n - label_ar (string); Encounter type label in Arabic. (e.g., عيادات خارجية, عيادات داخلية, زيارة منزلية)"
  },
  {
    "id": "table::seed_obesity_weight_status_category",
    "text": "Table: seed_obesity_weight_status_category\n    Description: Lookup table that defines weight status categories for obesity classification, with English labels and timestamps.\n    Columns:\n     - id (integer); Role: primary_key; Unique identifier for the weight status category.\n - name_en (string); Weight status category name in English (e.g., Underweight, Normal, Overweight, Obese).\n - updated_at (string); Timestamp of the most recent update to the category record. (e.g., 2023-08-30 22:37:47.543, 2023-08-30 22:37:47.543)\n - created_at (string); Timestamp when the category record was first created. (e.g., 2023-08-30 22:37:47.543, 2023-08-30 22:37:47.543)"
  },
  {
    "id": "table::mdm_clusters",
    "text": "Table: mdm_clusters\n    Description: Master data table that defines healthcare clusters and their associated regions, with multilingual labels and codes.\n    Columns:\n     - cluster_id (integer); Role: primary_key; Unique identifier for the healthcare cluster.\n - cluster_short_code (string); Short code representing the healthcare cluster. (e.g., R1, E3)\n - cluster_long_code (string); Long code or full reference code for the healthcare cluster. (e.g., Riyadh1, East3)\n - cluster_en (string); Cluster name in English. (e.g., Riyadh First Health Cluster, Eastern Health Cluster)\n - cluster_ar (string); Cluster name in Arabic. (e.g., تجمع الرياض الصحي الأول, تجمع الشرقية الصحي الثالث)\n - region_id (integer); Role: foreign_key; References: catchment_assignment_lookup_region.region_id; Identifier of the region associated with the cluster.\n - region_ar (string); Region name in Arabic. (e.g., منطقة الرياض, المنطقة الشرقية)\n - region_en (string); Region name in English. (e.g., Riyadh, Eastern Region)\n - created_at (timestamp); Timestamp when the cluster record was first created. (e.g., 2023-08-30 22:37:47.543, 2023-08-30 22:37:47.543)\n - updated_at (timestamp); Timestamp of the most recent update to the cluster record. (e.g., 2023-08-30 22:37:47.543, 2023-08-30 22:37:47.543)"
  },
  {
    "id": "table::catchment_assignment_lookup_region",
    "text": "Table: catchment_assignment_lookup_region\n    Description: Lookup table that defines administrative healthcare regions with English labels.\n    Columns:\n     - region_id (integer); Role: primary_key; Unique identifier for the healthcare region.\n - region_en (string); Region name in English. (e.g., Riyadh, Makkah)"
  },
  {
    "id": "table::seed_moh_branch_governorate",
    "text": "Table: seed_moh_branch_governorate\n    Description: Lookup table that defines MOH governorates and their associated MOH branches with multilingual labels.\n    Columns:\n     - governorate_id (integer); Role: primary_key; Unique identifier for the governorate.\n - governorate_en (string); Governorate name in English. (e.g., Al Bahah, Al Hajrah)\n - governorate_ar (string); Governorate name in Arabic. (e.g., الباحة , الحجرة)\n - moh_branch_id (integer); Identifier for the MOH branch associated with the governorate.\n - moh_branch_ar (string); MOH branch name in Arabic. (e.g., الباحة , عسير)"
  },
  {
    "id": "table::catchment_assignment_lookup_cities",
    "text": "Table: catchment_assignment_lookup_cities\n    Description: Lookup table that defines cities within healthcare catchment areas, including multilingual names and their association with regions and governorates.\n    Columns:\n     - city_id (string); Role: primary_key; Unique identifier for the city.\n - city_en (string); City name in English. (e.g., AL AWADHAH, AD DISAH)\n - city_ar (string); City name in Arabic. (e.g., وادي تربه الخيالة, الثعبان والظهيره)\n - region_id (integer); Role: foreign_key; References: catchment_assignment_lookup_region.region_id; Identifier for the region to which the city belongs.\n - governorate_id (integer); Role: foreign_key; References: seed_moh_branch_governorate.governorate_id; Identifier for the governorate to which the city belongs.\n - governorate_en (string); Governorate name in English. (e.g., Al Qara, Qilwah)\n - governorate_ar (string); Governorate name in Arabic. (e.g., القرى, قلوه)\n - created_at (timestamp); Timestamp when the city record was first created. (e.g., 2022-10-05 12:21:41.653810000, 2022-10-05 12:21:41.653810000)\n - updated_at (timestamp); Timestamp of the most recent update to the city record. (e.g., 2022-10-05 12:21:41.653810000, 2022-10-05 12:21:41.653810000)"
  },
  {
    "id": "table::catchment_assignment_lookup_districts",
    "text": "Table: catchment_assignment_lookup_districts\n    Description: Lookup table that defines districts within healthcare catchment areas, including multilingual names, geographic coordinates, and associations with clusters, cities, governorates, and regions.\n    Columns:\n     - district_id (string); Role: primary_key; Unique identifier for the district.\n - district_en (string); District name in English. (e.g., 'UNAYKIR, UTHAL)\n - district_ar (string); District name in Arabic. (e.g., عنيكر, أوثال)\n - cluster_id (integer); Role: foreign_key; References: mdm_clusters.cluster_id; Identifier of the healthcare cluster associated with the district.\n - latitude (double); Latitude coordinate of the district’s geographic center.\n - longitude (double); Longitude coordinate of the district’s geographic center.\n - region_id (integer); Role: foreign_key; References: catchment_assignment_lookup_region.region_id; Identifier for the region the district belongs to.\n - region_en (string); Region name in English. (e.g., Makkah, Qassim)\n - city_id (string); Role: foreign_key; References: catchment_assignment_lookup_cities.city_id; Identifier of the city the district belongs to.\n - city_en (string); City name in English. (e.g., 'UNAYKIR, UTHAL)\n - governorate_id (integer); Role: foreign_key; References: seed_moh_branch_governorate.governorate_id; Identifier for the governorate the district belongs to.\n - governorate_en (string); Governorate name in English. (e.g., Al Qunfudhah, Uyun Al Jiwa)\n - created_at (timestamp); Timestamp when the district record was first created. (e.g., 2022-09-24 20:28:19.101710000, 2022-09-24 20:28:19.101710000)\n - updated_at (timestamp); Timestamp of the most recent update to the district record. (e.g., 2022-09-24 20:28:19.101710000, 2022-09-24 20:28:19.101710000)"
  },
  {
    "id": "table::mdm_gender",
    "text": "Table: mdm_gender\n    Description: Lookup table that defines gender categories with multilingual labels.\n    Columns:\n     - gender_id (integer); Role: primary_key; Unique identifier for the gender category.\n - gender (string); General gender code or label. (e.g., M, F)\n - gender_en (string); Gender name in English. (e.g., Male, Female)\n - gender_ar (string); Gender name in Arabic. (e.g., ذكر, أنثى)\n - created_at (timestamp); Timestamp when the gender record was first created. (e.g., 2022-09-24 20:28:19.101710000, 2022-09-24 20:28:19.101710000)\n - updated_at (timestamp); Timestamp of the most recent update to the gender record. (e.g., 2022-09-24 20:28:19.101710000, 2022-09-24 20:28:19.101710000)"
  }
]